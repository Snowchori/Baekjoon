# python3

import sys
from collections import deque

def dfs(i,j):
	global n1, n2
	stack = deque([])
	count = 0
	stack.append([i,j])
	while stack:
		r1, r2 = stack.pop()
		if island[r1][r2] == 0 or visit.get((r1,r2)):
			continue
		count += 1
		visit[(r1,r2)] = True
		if r1-1 >= 0:
			stack.append([r1-1,r2])
			if r2-1 >= 0:
				stack.append([r1-1,r2-1])
			if r2+1 < n1:
				stack.append([r1-1,r2+1])
		if r1+1 < n2:
			stack.append([r1+1,r2])
			if r2-1 >= 0:
				stack.append([r1+1,r2-1])
			if r2+1 < n1:
				stack.append([r1+1,r2+1])
		if r2-1 >= 0:
			stack.append([r1,r2-1])
			if r1-1 >= 0:
				stack.append([r1-1,r2-1])
			if r1+1 < n2:
				stack.append([r1+1,r2-1])
		if r2+1 < n1:
			stack.append([r1,r2+1])
			if r1-1 >= 0:
				stack.append([r1-1,r2+1])
			if r1+1 < n2:
				stack.append([r1+1,r2+1])
	return count

while True:
	n1, n2 = [int(x) for x in sys.stdin.readline().split()]
	if n1 == n2 == 0:
		break
	island = []
	visit = {}
	for i in range(n2):
		p = [int(x) for x in sys.stdin.readline().split()]
		island.append(p)
		for j in range(n1):
			visit[(i,j)] = False
	result = []
	for i in range(n2):
		for j in range(n1):
			r = dfs(i,j)
			if r != 0:
				result.append(r)
	print(len(result))